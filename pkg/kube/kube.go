package kube

import (
	"encoding/base64"

	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
	clientcmdapi "k8s.io/client-go/tools/clientcmd/api"

	dnsclientset "github.com/bind-dns/binddns-operator/pkg/generated/clientset/versioned"
)

var (
	globalKubeClient *KubeClient
)

type KubeClient struct {
	restConfig *rest.Config

	clientSet    kubernetes.Interface
	dnsClientSet dnsclientset.Interface
}

func InitOutOfKubernetes() error {
	kubeConfig, err := base64.StdEncoding.DecodeString("YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNMWVrTkRRV01yWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplRTFFUlhkT2FrRTFUWHBGZVU1R2IxaEVWRTE0VFVSRmQwNUVRVFZOZWtWNVRrWnZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCU25aaENtaFlaakV6VkRGWGEwWlVjWGg2YTFsWVN6Z3dZaXRpZGpOSGRXNXlZMUU1V1dGR1NFTkdhVEU0ZUhwVVNXZGhWMnRhWkhwNWMySmtSVUYxV2twUVpUY0tiWEZ3ZDNkdmVscHhlRVZ6Tm1Kd1NqQnZVM1Y0Wld0emEzVlBWREE1VFdSUWFqZFFTVFJ4Vm1KV2NqTndjamhSYzJwaVpHWmxlRTU2THpCTmMwVXJZZ3AyYkhseE1GQlBaMGR6TW0xbVJ6ZExiVVZEWnl0MlFVRnBOSEZ5Wm5wbU1uRkJWREpYVG5GaFNsTXdOWFJrYzIxMmVVaFpka1JhVmxWYUt6YzVSbU5ZQ25Ka1EyZERTRVZ3VTJka2FqQndObUptTUhwV1NHWk1RMU5zYkRCMWVWZDNaa2xSZDJkdVEzVkdSMWhtUlVFMmFtMUlLM0pXUVRablluWllOelYwVjFRS01VTlJWM2g0V1M4emRXdzRiRGhEWlhSalQzQjJRWEY0SzJSU1ZEbEpiMjlQTVRGdVVGUjNkMVJEYkZOMFMyVTBNSFZUV2t3MVluRjVXVFp3Vkd4bFNncHRTRzVDVlU5Mk5WVjFiVlZFTkdkdFVucGpRMEYzUlVGQllVNURUVVZCZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWktjR3NyTVhCTk4wNUpVRFpsYjNKVlNFSkRVMnBIT1ZSV05tSk5RVEJIUTFOeFIxTkpZak1LUkZGRlFrTjNWVUZCTkVsQ1FWRkNTbVJ5UTNSYU5ISXdVR1V6U2xsaWFDOVZNMjl5TDNNMFJsVkhURWhqZDFWMVJsZHBOa015WjFkRmNUUmxTbmh3WXdwWlpERTFhRXhWVFhVeGMzRnJibkkyU1VkSE1tbFZaVzFEWlhScVUyMHhPRWROYzFORldXOVBXRzV4ZDNoSGMwOTJNekZMUlRKM2NXTkxVelpSYkhScENrWmxSR2d2T1ZVdlUza3dSVWxKVjJzeGJsZFdkVlJCYkZGWFNFRmFaVEJYUWxaVWJXaFllVWhrU1d0emJDODJjVWdyWWxwbWJuZzJWWFYyWm5nNFFYY0tXVFF4VVZKRFZrWlFUVkZhUjNWb05raHdiRWxMUTFkbllqQnVOMVl4YmtoR2FWUjZjbTk1Vm1GVU5XRlBkRGxoYmtKTk5rMVZNa2hFVG5aeEx6SlFad3B5YUhkMk1WWjJjRWxOS3pOR2RHTlVNREZTYTBsVVkxRXdRaXQ2U0d4TWVIQk1kRkZQTWtwTVlWaERORUZEVW5OUVFUSTNSalJMYTBoS2JuQTBaR2xEQ2twM1JuQTFNVzlVVkhOdFFtdG1SR3RETlZscVREUkVOa2xGWlRWak9FdFRWMmxqVXdvdExTMHRMVVZPUkNCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2c9PQogICAgc2VydmVyOiBodHRwczovLzE3Mi4yMC4xMC4xNDo2NDQzCiAgbmFtZToga3ViZXJuZXRlcwpjb250ZXh0czoKLSBjb250ZXh0OgogICAgY2x1c3Rlcjoga3ViZXJuZXRlcwogICAgdXNlcjoga3ViZXJuZXRlcy1hZG1pbgogIG5hbWU6IGt1YmVybmV0ZXMtYWRtaW5Aa3ViZXJuZXRlcwpjdXJyZW50LWNvbnRleHQ6IGt1YmVybmV0ZXMtYWRtaW5Aa3ViZXJuZXRlcwpraW5kOiBDb25maWcKcHJlZmVyZW5jZXM6IHt9CnVzZXJzOgotIG5hbWU6IGt1YmVybmV0ZXMtYWRtaW4KICB1c2VyOgogICAgY2xpZW50LWNlcnRpZmljYXRlLWRhdGE6IExTMHRMUzFDUlVkSlRpQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENrMUpTVVJGZWtORFFXWjFaMEYzU1VKQlowbEpXRmhNVTJsaGRYaGthRUYzUkZGWlNrdHZXa2xvZG1OT1FWRkZURUpSUVhkR1ZFVlVUVUpGUjBFeFZVVUtRWGhOUzJFelZtbGFXRXAxV2xoU2JHTjZRV1ZHZHpCNVRWUkJlRTFFV1hkUFZFMTRUV3BTWVVaM01IbE5ha0Y0VFVSWmQwOVVUWGhOYWxwaFRVUlJlQXBHZWtGV1FtZE9Wa0pCYjFSRWJrNDFZek5TYkdKVWNIUlpXRTR3V2xoS2VrMVNhM2RHZDFsRVZsRlJSRVY0UW5Ka1YwcHNZMjAxYkdSSFZucE1WMFpyQ21KWGJIVk5TVWxDU1dwQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSUlVaQlFVOURRVkU0UVUxSlNVSkRaMHREUVZGRlFXMHpaamd4YTBkTlNrczNka2t5Y0RRS2REbHdNRWwwT0VKcWFqUTFRV3BKTDBsak0ycEVjREZCZERacFRXRXJTMmxDVTNkbU9YWTRWa05LWTFoNmIyUlpOR2RRYlhkS2JEZDRObXhQUzAxc1JBcHJVU3RsU0hOd2MxVkdWWE54YTFSUGJ6QkNabU5rYUZCbmFrTTFRMVpZVWtkcFJtNXhOa2w0U0VRdk4yUnVXbVl6VUhjMlRsRmFlRE5MTDFaaWVGWk5Da3hQZDNaU09VbGFSVTUxUjNkdlltNHpZbkJqU0dnM2MyRnRkM0ZETkhJM1NFZGhOR2RSUlZSWU16RmFjalZsZDBrM2FYcGthRzkzVUVzMFZHeG1ZbklLZGxvMVUybGxOa016Y1c1U1RFcEVhWFU1WjBwU01rTnFkRUpFZFU5VEswZFlkRzE0TkRWeWQxVm1PVk5FYWs1bVIydFROVTlxV2sxb0x6SkZNMFF2WndwS1lrMHlia3BTYmxoVU1XUnhNRlV2TUcwNEszbDZNMEpTYzJwblVGbG9iMW8xUjBsM1RFa3pURlI1U1dWR1kxSlBRWGR0VW5nemR6QkJiMHBtY0ZZckNuQkdRbnBUVVVsRVFWRkJRbTh3WjNkU2FrRlBRbWRPVmtoUk9FSkJaamhGUWtGTlEwSmhRWGRGZDFsRVZsSXdiRUpCZDNkRFoxbEpTM2RaUWtKUlZVZ0tRWGRKZDBoM1dVUldVakJxUWtKbmQwWnZRVlZ0YlZRM1YydDZjekJuTDNBMmFYUlJZMFZLUzAxaU1VNVljSE4zUkZGWlNrdHZXa2xvZG1OT1FWRkZUQXBDVVVGRVoyZEZRa0ZJYkRJMFJGcDFWMGw1V1VFMk9FNU5VVUpFUjFKRFpVZ3JMM1pJTXl0TFdtdDRUMHRWTjA5Mlkwb3JjSEZaTW5aTFlVdFpLME5vQ21GM1QweGxZMXBqZFVGUmF6SXJaVEUwYXpSelJYVTNTbkJSTjFBck5UaHlOelpJWjNOMWJIa3hiaTh4THpKWUwyNHhla2RZVkN0NlV6ZEZWWEZoVlZnS09IbGpWMUpUZG1RMmNUZFRNbTFETUdVNGNESnhhME4wZVZKQlIxUkNOVlV5ZEcxdWJXbHdWekkzSzJ4bFQyVTNibW80VVcxRUsxb3pkRXBTUW10cFdRcE5RM1ZNZFdKdlNFaFZSbTluVTA5TllrUTNVRVpCY1hOWVpXeFphek5RYUhSclZUTTRNR0ZYVUZkalJUTlhkMVJPYm1ZeU9FTTRiMUV4ZGxKNU0zUXhDazV2WkhSNVZrazRRbEpEVjB4d1FWVjZOMmhUVEVGd2VtUlhSVmd6TVROQmJ6SkJTWEpCZGtSSmRYQXpWMWRsYW1SdFdETjBhM0ppVEdkdE1HdDFSVU1LUkdGVWFtVkljVEZZYlc1VWN6QkxjbU42U0VGTlVUUnVTVmxoWmxaell6MEtMUzB0TFMxRlRrUWdRMFZTVkVsR1NVTkJWRVV0TFMwdExRbz0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjJkSlFrRkJTME5CVVVWQmJUTm1PREZyUjAxS1N6ZDJTVEp3TkhRNWNEQkpkRGhDYW1vME5VRnFTUzlKWXpOcVJIQXhRWFEyYVUxaEswdHBDa0pUZDJZNWRqaFdRMHBqV0hwdlpGazBaMUJ0ZDBwc04zZzJiRTlMVFd4RWExRXJaVWh6Y0hOVlJsVnpjV3RVVDI4d1FtWmpaR2hRWjJwRE5VTldXRklLUjJsR2JuRTJTWGhJUkM4M1pHNWFaak5RZHpaT1VWcDRNMHN2Vm1KNFZrMU1UM2QyVWpsSldrVk9kVWQzYjJKdU0ySndZMGhvTjNOaGJYZHhRelJ5TndwSVIyRTBaMUZGVkZnek1WcHlOV1YzU1RkcGVtUm9iM2RRU3pSVWJHWmljblphTlZOcFpUWkRNM0Z1VWt4S1JHbDFPV2RLVWpKRGFuUkNSSFZQVXl0SENsaDBiWGcwTlhKM1ZXWTVVMFJxVG1aSGExTTFUMnBhVFdndk1rVXpSQzluU21KTk1tNUtVbTVZVkRGa2NUQlZMekJ0T0N0NWVqTkNVbk5xWjFCWmFHOEtXalZIU1hkTVNUTk1WSGxKWlVaalVrOUJkMjFTZUROM01FRnZTbVp3Vml0d1JrSjZVMUZKUkVGUlFVSkJiMGxDUVVRd1dHcEhTa0pTWVc1UmJVTlpjQXB0TmtKaWJIQkdlRmx1U1dJek1XdFBiRFpLV0M5dFduRjNkR2x2ZDJVeFVFWkhNMFkxYUZkM1RGQnlRVXhPYlRaakswZ3dkVWxPYzJwTGFISjZhM1pYQ25OMFpGazVUVU5UZFV4a2EydFFWMnB5YWs5WFozbHpRVmhzV1VKblYxTTJkRlF4TkdKUU1sUTRXWEI0Vm1kWk5rRXZaVnB2WlVobFZUTllkVWh2WmxZS1RHRmliR1JNY21KUk5FSk9WVFJ2ZW1GMkwwWlZTbVZDWmxaT1pqWjFRblJsVjA0ME0ycFJabkJXYkRaamMwbzNXbVZZWVhnclpYcFJhRGhEYm1sMFR3cDViWFZJZHl0WE4wcFFhbXR1UldwSGFrSkhWMEZ0UkRKcUsxRkdia1F4V1ZoaFltVnBkRTlqTTBGSWQxZFJUbHBZUzFsWGJEWmlWblpaVlVSQ1JqVjVDa016VDBkak0wWkhVbkpCWm5wdWQwRXplSG94TDFKak5sQnhVMEUxTUU5NU1UQnNSbmxvY3pGVWFuVjZRU3RqUkRSbk5HMWhUWGxGVW1kRFFrMTZVeXNLU2k5REsxRldSVU5uV1VWQmR6bEhVMU5TUVVWb05VTnZhakJSVjJZNFNUaHdXV2hWYlZObFNsRkJWalZzYkROek9HMDRObE13YUZKQ2EwazBibEJaYWdwUFF6QlZNMVZ0WTBwdGRVNTZNemxRY1ZvNFRpOWlTR3B4Ums5VE4zWXlSMnBqZDFvMWVIRlJVMmR1UkhvM1ZHOXRNVms0V1ZwUlUwNVZZM2QzUlV4b0NrZDFNUzlTVGpWbE9WYzBabEp6WlRSVFdUTnVWMUpPU21kb04wVXdSbFJwV0VwSmNuTnNRamRuVTIxRWJpOWlNVTFuUVhsTlVGVkRaMWxGUVhsNkwwNEtiVVV5UkVGb05XMDJhelJWZEdKaVkwZExhMVpIVDNWa2NrbDNhRlJXUkdobmFXVXhlRzlqTkVGYWFWQlJTMjlTY0dSTllXRlRjRGRJUVVrdlVURkdZd28zTVVSa05ESlFPVVp1ZEZaVk1GaEhTWFZUY1ZZeGVuZE5WakpNYmxWTlNVRlBhMWhxVlhSNmFVb3hkbUZKYTJoNE5VeGtOMGhSWnpaYVZFWXhWVWNyQ2xCTk9XZEpjRVJXTjJob00wcFpNMnRWSzNvMlMwOTNlVTlNYzJWMFNGcHVlazV6VjJSSlZVTm5XVUZtYTFSb1dUWlBhMmxDV2t3eWVsazBiU3RIVVZrS1pERnlWQ3RqYVhCa2JtZzRXV2hZYUcwd1lURm1hVzQxY2xaRk9VWkllbTVCU0ZZNWJYWkZLMVJHV201SVpXNHdkVlI0YWt0dWN6a3hiMDAwV0dONVJRcE1WMUEzYlc4cmNVdzVjazlOUTJKVVlUbHdLMFJKV0VjMmRuZFVPRzVSYUdsRGJtUkxNQzgxYkhSQldqZ3ZXbXRtVTJwUVpHdHRRMWhZTVhrM1JYY3hDbWxwWW1KTWVHaEtORk40YWpkRlltOHdXbXhHZUZGTFFtZEVUMmRxYkVjNGFIRlhXVWxXTkhNelZHWllUR2R6V21vclJsaHZRMG92UzJOd1p6TkNaR0VLYWs5TVZEUkNZMUJ6U0hWc1pETjNaWEJzZGtkVVlWVnpjMUJOYUdwTVJFSlpjM1J4ZWpWUVVsZHFaMlo0YUdWQk5pOHZjUzlLZDJSbVpWSkNZbHAzUmdwdFZsUnljMGh2YjA4eU9XSlFabWhoZUhkS1ZEaFVVa1E1VVdsYVpsbEJiVEJQTWxkNWNrTkVRMGRxUTNCU1ptOVllR0pqUVVadVIzUnBUSGt6UzFRNUNteGlUMlJCYjBkQlduRnBSRXc1YVN0UU1FcHhUVlo1ZG1ZellsbERaMjVhVTJNeFZ6SjRWSGhuTjJWQ05rNUxSMUpvUzNoa1pEWm5UM1V2Y1ZaMlJqa0tPV05zYlhwNlRsVkJaRVJUWTFKcE5ubEpOVEZPUlhkU2NucGFhMmw2VldWcFRqbEVjQzk2TlM5aFVIcHFlRmQxZEZSSlpFRllaREZpUzNVM1JISXpjd3BDVkZabFJXc3hUbXRFU0dFdlNVRjNaRGM0V2pFeFdqTTRVbkExVDI5NU5FZFFkVzVSWW1KMGFVaHRNVUo0UmxCbE4wMDlDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQ==")
	if err != nil {
		return err
	}

	restConfig, err := clientcmd.BuildConfigFromKubeconfigGetter("", func() (config *clientcmdapi.Config, e error) {
		return clientcmd.Load(kubeConfig)
	})

	if err != nil {
		return err
	}

	clientSet, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return err
	}

	// crd clientset
	dnsClientSet, err := dnsclientset.NewForConfig(restConfig)
	if err != nil {
		return err
	}

	globalKubeClient = &KubeClient{
		restConfig:   restConfig,
		clientSet:    clientSet,
		dnsClientSet: dnsClientSet,
	}
	return nil
}

func InitKubernetesClient() error {
	restConfig, err := rest.InClusterConfig()
	if err != nil {
		return err
	}
	// k8s standard clientset
	clientSet, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return err
	}

	// crd clientset
	dnsClientSet, err := dnsclientset.NewForConfig(restConfig)
	if err != nil {
		return err
	}

	globalKubeClient = &KubeClient{
		restConfig:   restConfig,
		clientSet:    clientSet,
		dnsClientSet: dnsClientSet,
	}
	clientSet.CoreV1().Namespaces()
	return nil
}

func GetKubeClient() *KubeClient {
	return globalKubeClient
}

func (client *KubeClient) GetRestConfig() *rest.Config {
	return client.restConfig
}

func (client *KubeClient) GetClientSet() kubernetes.Interface {
	return client.clientSet
}

func (client *KubeClient) GetDnsClientSet() dnsclientset.Interface {
	return client.dnsClientSet
}
